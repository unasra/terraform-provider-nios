/*
IbClient

OpenAPI 3.x.x specification for the IbClient API

API version: 3.0.0
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordAResponse - struct for ListRecordAResponse
type ListRecordAResponse struct {
	ListRecordAResponseObject *ListRecordAResponseObject
	ArrayOfRecordA            *[]RecordA
}

// ListRecordAResponseObjectAsListRecordAResponse is a convenience function that returns ListRecordAResponseObject wrapped in ListRecordAResponse
func ListRecordAResponseObjectAsListRecordAResponse(v *ListRecordAResponseObject) ListRecordAResponse {
	return ListRecordAResponse{
		ListRecordAResponseObject: v,
	}
}

// []RecordAAsListRecordAResponse is a convenience function that returns []RecordA wrapped in ListRecordAResponse
func ArrayOfRecordAAsListRecordAResponse(v *[]RecordA) ListRecordAResponse {
	return ListRecordAResponse{
		ArrayOfRecordA: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordAResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordAResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordAResponseObject)
	if err == nil {
		jsonListRecordAResponseObject, _ := json.Marshal(dst.ListRecordAResponseObject)
		if string(jsonListRecordAResponseObject) == "{}" { // empty struct
			dst.ListRecordAResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordAResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordA
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordA)
	if err == nil {
		jsonArrayOfRecordA, _ := json.Marshal(dst.ArrayOfRecordA)
		if string(jsonArrayOfRecordA) == "{}" { // empty struct
			dst.ArrayOfRecordA = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordA = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordAResponseObject = nil
		dst.ArrayOfRecordA = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordAResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordAResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordAResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordAResponseObject != nil {
		return json.Marshal(&src.ListRecordAResponseObject)
	}

	if src.ArrayOfRecordA != nil {
		return json.Marshal(&src.ArrayOfRecordA)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordAResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordAResponseObject != nil {
		return obj.ListRecordAResponseObject
	}

	if obj.ArrayOfRecordA != nil {
		return obj.ArrayOfRecordA
	}

	// all schemas are nil
	return nil
}

type NullableListRecordAResponse struct {
	value *ListRecordAResponse
	isSet bool
}

func (v NullableListRecordAResponse) Get() *ListRecordAResponse {
	return v.value
}

func (v *NullableListRecordAResponse) Set(val *ListRecordAResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordAResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordAResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordAResponse(val *ListRecordAResponse) *NullableListRecordAResponse {
	return &NullableListRecordAResponse{value: val, isSet: true}
}

func (v NullableListRecordAResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordAResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
